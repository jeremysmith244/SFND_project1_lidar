	// this does not work, in this case you want to modify the POINTER, and not the value it reference
	// realize that passing the pointer creates a local memory allocation, since it is within the namespace of
	// the insert helper function. If you wanted to modify a value in the global scope, you would pass the pointer
	// by grabbing the memory address of a variable. Then you would pass that to the function, and then modify the 
	// deference of the memory address in the function. Here you want to modify the pointer, so you need a double pointer.
	// This seemed a bit clunkier syntax wise than references (the simple pointer case also ...), so i am going to use 
	// references going forward.

	void insertHelper(Node* node, uint depth, std::vector<float> point, int id)
	{

		// tree is empty
		if(node==NULL){
			node = new Node(point, id);
		} else {
			// calculate current dim
			uint cd = depth % 2;
			if( point[cd] < ((node)->point[cd]) ){
				insertHelper(( (node)->left ), depth+1, point, id);
			} else {
				insertHelper(( (node)->right ), depth+1, point, id);
			}
		}
	}

    // double pointer, works same as reference
	void insertHelper(Node** node, uint depth, std::vector<float> point, int id)
	{

		// tree is empty
		if(*node==NULL){
			*node = new Node(point, id);
		} else {
			// calculate current dim
			uint cd = depth % 2;
			if( point[cd] < ((*node)->point[cd]) ){
				insertHelper(&( (*node)->left ), depth+1, point, id);
			} else {
				insertHelper(&( (*node)->right ), depth+1, point, id);
			}
		}
	}

			/*int alt = -1;
		bool hit_bottom = false;

		if (root == NULL){
			root = new Node(point, id);
			hit_bottom = true;
		}

		Node* cur_node = root;
		while(!(hit_bottom))
		{
			if (alt = -1){
				if (cur_node->point.at(0) > point.at(0)){
					cur_node = cur_node->left;
				}
				else {
					cur_node = cur_node->right;
				}
			}
			else{
				if (cur_node->point.at(1) > point.at(1)){
					cur_node = cur_node->left;
				}
				else {
					cur_node = cur_node->right;
				}
			}

			if (cur_node == NULL){
				cur_node = new Node(point, id);
				hit_bottom = true;
				break;
			}
			 else {
				alt *= -1;
			 }
		}*/



void proximity(const std::vector<std::vector<float>> points, KdTree* tree, const float distanceTol, int id, std::set<int>& markedPoints, std::vector<int>& cluster)
{

	if ( (markedPoints.count(id) == 0) ) {
		markedPoints.insert(id);
		cluster.push_back(id);
		
		std::vector<int> nearbyPoints = tree->search(points[id], distanceTol);
		std::vector<int>::iterator it;

		for(it = nearbyPoints.begin(); it != nearbyPoints.end(); ++it){
			if ( (markedPoints.count(*it) == 0) ){
				proximity(points, tree, distanceTol, *it, markedPoints, cluster);
			} else {
				continue;
			}
		}
	}
}

std::vector<std::vector<int>> euclideanCluster(const std::vector<std::vector<float>>& points, KdTree* tree, float distanceTol)
{

	// TODO: Fill out this function to return list of indices for each cluster

	std::vector<std::vector<int>> clusters;
	std::set<int> markedPoints;
	for (int i = 0; i < points.size(); i++) {
		if (markedPoints.count(i) == 0){
			std::vector<int> cluster;
			proximity(points, tree, distanceTol, i, markedPoints, cluster);
			clusters.push_back(cluster);
		} 
	}
 
	return clusters;

}